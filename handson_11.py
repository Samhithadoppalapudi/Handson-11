# -*- coding: utf-8 -*-
"""Handson 11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M0SVzp524KqmU5f6ETiA5QYYJZG_lPVK
"""

class DynamicArray:
    def __init__(self, capacity=2):
        self.arr = [0] * capacity  # Initialize with a fixed-size array
        self.arr_size = 0          # Current size (number of elements)
        self.arr_capacity = capacity  # Current capacity

    def resize(self, new_capacity):
        new_arr = [0] * new_capacity  # Create a new array with new capacity
        for i in range(self.arr_size):  # Copy elements to the new array
            new_arr[i] = self.arr[i]
        self.arr = new_arr
        self.arr_capacity = new_capacity

    def push_back(self, value):
        if self.arr_size == self.arr_capacity:
            self.resize(self.arr_capacity * 2)  # Double the capacity if full
        self.arr[self.arr_size] = value
        self.arr_size += 1

    def pop_back(self):
        if self.arr_size > 0:
            self.arr_size -= 1
            if self.arr_size <= self.arr_capacity // 4:
                self.resize(max(2, self.arr_capacity // 2))  # Shrink if necessary

    def __getitem__(self, index):
        if 0 <= index < self.arr_size:
            return self.arr[index]
        else:
            raise IndexError("Index out of bounds")

    def size(self):
        return self.arr_size

    def capacity(self):
        return self.arr_capacity

# Test function
if __name__ == "__main__":
    da = DynamicArray()
    da.push_back(10)
    da.push_back(20)
    da.push_back(30)
    da.push_back(40)

    print("Array elements:", [da[i] for i in range(da.size())])
    print("Size:", da.size())
    print("Capacity:", da.capacity())

    da.pop_back()
    print("After pop_back, Size:", da.size(), ", Capacity:", da.capacity())